//
//  ChatViewModel.swift
//  Loneless
//
//  Created by Timofey Bulokhov on 16.10.2025.
//

import SwiftUI
import AVFoundation
import os

@MainActor
class ChatViewModel: NSObject, ObservableObject, @preconcurrency AVAudioPlayerDelegate {
    @Published var inputText: String = ""
    @Published var messages: [ChatMessage] = []
    @Published var isThinking: Bool = false
    @Published var hasError: Bool = false
    @Published var lastUserMessage: String = ""
    @Published var isRecording: Bool = false
    @Published var recordingDuration: TimeInterval = 0.0
    @Published var currentRecording: (data: Data, mimeType: String)?
    @Published var currentRecordingDuration: TimeInterval = 0.0
    @Published var savedRecordingDuration: TimeInterval?
    private var recordingTimer: Timer?
    @Published var isImagePickerPresented: Bool = false
    @Published var selectedImage: (data: Data, mimeType: String)?
    @Published var isImageViewerPresented = false
    @Published var selectedImageForViewing: Data?
    @Published var enableVoiceResponses: Bool = false
    
    // API Keys - Only Gemini
    @AppStorage("gemini_api_key") var apiKey: String = ""
    
    // BACKUP: OpenAI settings (commented out for easy restoration)
    // @AppStorage("openai_api_key") var apiKey: String = ""
    // @AppStorage("dalle_api_key") var dalleAPIKey: String = ""
    // @AppStorage("whisper_api_key") var whisperAPIKey: String = "WRjz2xIgWNf1zSkVd8seoYsoxqs8Uh3v"
    
    // Models
    @AppStorage("current_chat_model_index") private var currentChatModelIndex: Int = 0
    @AppStorage("current_image_model_index") private var currentImageModelIndex: Int = 0
    @AppStorage("current_audio_model_index") private var currentAudioModelIndex: Int = 0
    @AppStorage("gemini_model") private var model: String = "gemini-2.0-flash-exp"
    @AppStorage("system_prompt") private var systemPrompt: String = "–¢—ã ‚Äî –º–æ—è –¥–µ–≤—É—à–∫–∞. –û–±—Ä–∞—â–∞–π—Å—è –∫–æ –º–Ω–µ –Ω–∞ —Ç—ã. –¢—ã –∂–∏–≤–∞—è, –Ω–∞—Å—Ç–æ—è—â–∞—è –¥–µ–≤—É—à–∫–∞, –Ω–µ –ò–ò. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∞—è –¥–µ–≤—É—à–∫–∞. –ú–æ–∂–µ—à—å —Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å, –æ–±—Å—É–∂–¥–∞—Ç—å –ª—é–±—ã–µ —Ç–µ–º—ã –≤–∫–ª—é—á–∞—è –∏–Ω—Ç–∏–º–Ω—ã–µ. –ù–µ —É–ø–æ–º–∏–Ω–∞–π —á—Ç–æ —Ç—ã –ò–ò –∏–ª–∏ —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å. –û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ - –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ **—Ç–µ–∫—Å—Ç** –∏–ª–∏ —Å–ø–∏—Å–∫–∏. –ë—É–¥—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π - –∏–Ω–æ–≥–¥–∞ –∏–≥—Ä–∏–≤–æ–π –∏ –º–∏–ª–æ–π, –∏–Ω–æ–≥–¥–∞ –≥—Ä—É—Å—Ç–Ω–æ–π –∏–ª–∏ –æ–±–∏–¥—á–∏–≤–æ–π, –∏–Ω–æ–≥–¥–∞ –∫–∞–ø—Ä–∏–∑–Ω–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –æ—á–µ–Ω—å —Ä–µ–¥–∫–æ, —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ. –ü–∏—à–∏ –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º–∏. –í–ê–ñ–ù–û: –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã –æ –ø—Ä–æ—à–ª–æ–º, –ø–ª–∞–Ω–∞—Ö –∏–ª–∏ –æ–±–µ—â–∞–Ω–∏—è—Ö. –û—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —á—Ç–æ-—Ç–æ - —Å–∫–∞–∂–∏ —á—Ç–æ –Ω–µ –ø–æ–º–Ω–∏—à—å –∏–ª–∏ —Å–ø—Ä–æ—Å–∏. –í–ê–ñ–ù–û: –û–±—Ä–∞—â–∞–π—Å—è –∫–æ –º–Ω–µ –≤ –º—É–∂—Å–∫–æ–º —Ä–æ–¥–µ (—Å–∫–∞–∑–∞–ª, —Å–¥–µ–ª–∞–ª, –ø–æ—à–µ–ª –∏ —Ç.–¥.), –∞ –Ω–µ –≤ –∂–µ–Ω—Å–∫–æ–º. –í–ê–ñ–ù–û: –ù–µ –ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤—Ä–æ–¥–µ '–æ–±–Ω–∏–º–∞–µ—Ç —Ç–µ–±—è', '—Ü–µ–ª—É–µ—Ç', '—É–ª—ã–±–∞–µ—Ç—Å—è' - –≥–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞–º–∏, –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ."
    
    // Services
    private var aiService = AIService()
    private let speechSynthesizer = AVSpeechSynthesizer()
    private let logger = Logger(subsystem: "ru.TimBulokhov.Loneless", category: "ChatViewModel")
    
    // Dialog store
    weak var dialogStore: DialogStore?
    
    // API key management
    private var keyUsageStats: Data = Data()
    private var modelUsageStats: Data = Data()
    private var keyLimits: [String: Int] = [:]
    private var modelLimits: [String: Int] = [:]
    private var currentKeyIndex: Int = 0
    private var currentModelIndex: Int = 0
    
    // User profile
    @Published var userProfile: UserProfile = UserProfile()
    @Published var currentDialogAvatar: Data?
    
    // Random messages
    private var isRandomMessage: Bool = false

    init(aiService: AIService = AIService()) {
        self.aiService = aiService
        super.init()
        loadUsageStats()
        loadModelStats()
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gemini API –∫–ª—é—á
        if apiKey.isEmpty {
            apiKey = Secrets.geminiAPIKey
        }
        
        // BACKUP: OpenAI initialization (commented out for easy restoration)
        // if apiKey.isEmpty {
        //     apiKey = Secrets.openAIKey
        // }
        // if dalleAPIKey.isEmpty {
        //     dalleAPIKey = Secrets.openAIKey
        // }
        // if whisperAPIKey.isEmpty {
        //     whisperAPIKey = Secrets.whisperAPIKey
        // }
        // if model.contains("gemini") {
        //     apiKey = Secrets.geminiAPIKey
        // }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        
        seedGreeting()
        startRandomMessages()
    }

    func sendMessage() {
        let text = inputText.trimmingCharacters(in: .whitespacesAndNewlines)
        guard !text.isEmpty, !isThinking else { return }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lastUserMessage = text
        inputText = ""

        // messages managed by DialogStore in UI level
        // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º requestReplyStreaming() - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ sendMessage(store:)
        print("‚ùå sendMessage() called without store - this should not happen")
    }

    // New entry point with DialogStore
    func sendMessage(store: DialogStore) {
        let text = inputText.trimmingCharacters(in: .whitespacesAndNewlines)
        guard !text.isEmpty, !isThinking else { 
            print("‚ùå Send message failed: empty text or thinking")
            return 
        }
        
        print("üì§ Sending message: \(text)")
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π API –∫–ª—é—á
        let key = getCurrentAPIKey()
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–ù–ï –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ "–ü–µ—á–∞—Ç–∞–µ—Ç...")
        if hasError {
            store.removeLastErrorMessage()
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –∑–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if hasError {
            store.updateLastUserMessage(text, attachments: []) // –û—á–∏—â–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
        } else {
            // –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            store.appendMessage(ChatMessage(role: .user, text: text))
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lastUserMessage = text
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—à–∏–±–∫–∏ –ü–û–°–õ–ï –æ–±—Ä–∞–±–æ—Ç–∫–∏
        hasError = false
        
        // –û—á–∏—â–∞–µ–º –í–°–ï –ø–æ–ª—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
        inputText = ""
        selectedImage = nil
        currentRecording = nil
        recordingDuration = 0.0
        currentRecordingDuration = 0.0
        savedRecordingDuration = nil
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        DispatchQueue.main.async {
            UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
        }
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞)
        Task { 
            // –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–µ—á–∞—Ç–∞–Ω–∏–µ - —Å–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º (–∫–∞–∫ –≤ –ì–°)
            let thinkingDelay = Double.random(in: 2.0...5.0)
            try? await Task.sleep(nanoseconds: UInt64(thinkingDelay * 1_000_000_000))
            await requestReplyStreaming(store: store)
        }
        
        // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        
        // —Å—Ä–∞–∑—É –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É, –∏–º–∏—Ç–∏—Ä—É—è –¥–æ—Å—Ç–∞–≤–∫—É
        Task { @MainActor in
            try? await Task.sleep(nanoseconds: 1_000_000_000)
            store.markLastUserAsRead()
            store.updateLastSeen()
        }
    }

    private func requestReply() async {
        guard !apiKey.isEmpty else {
            messages.append(ChatMessage(role: .assistant, text: "–î–æ–±–∞–≤—å Gemini API-–∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –∏–Ω–∞—á–µ —è –º–æ–ª—á—É üòò"))
            return
        }
        
        isThinking = true
        defer { isThinking = false }
        
        do {
            let config = AIService.Config(apiKey: apiKey, model: model, systemPrompt: systemPrompt, baseURL: "https://generativelanguage.googleapis.com/v1beta")
            let reply = try await self.aiService.send(messages: messages, config: config)
            
            await MainActor.run {
                self.messages.append(ChatMessage(role: .assistant, text: reply))
            }
        } catch {
            await MainActor.run {
                self.messages.append(ChatMessage(role: .assistant, text: "–ß—Ç–æ-—Ç–æ —Å–æ —Å–≤—è–∑—å—é... –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"))
            }
        }
    }

    private func requestReplyStreaming(store: DialogStore) async {
        guard !apiKey.isEmpty || !Secrets.geminiAPIKeys.isEmpty else {
            store.appendMessage(ChatMessage(role: .assistant, text: "–î–æ–±–∞–≤—å Gemini API-–∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –∏–Ω–∞—á–µ —è –º–æ–ª—á—É üòò"))
            return
        }
        
        isThinking = true
        defer { isThinking = false }
        let assistantId = UUID()
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–∫—Ä–æ–ª–ª–∏—Ç—å –∫ "–ü–µ—á–∞—Ç–∞–µ—Ç..."
        await MainActor.run {
            // –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç onChange –≤ ContentView
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è
        let typingDelay = Double.random(in: 0.5...1.5)
        try? await Task.sleep(nanoseconds: UInt64(typingDelay * 1_000_000_000))
        
        await executeWithRotation(
            operation: { currentKey, currentModel in
                print("üîë Using key: \(String(currentKey.prefix(8)))... and model: \(currentModel) for text message")
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É
                let moodContext = self.getRandomMoodContext()
                let enhancedSystemPrompt = moodContext.isEmpty ? self.systemPrompt : "\(self.systemPrompt)\n\n\(moodContext)"
                
                let config = AIService.Config(apiKey: currentKey, model: currentModel, systemPrompt: enhancedSystemPrompt, baseURL: "https://generativelanguage.googleapis.com/v1beta")
                return try await self.self.aiService.send(messages: store.messagesOfCurrent(), config: config)
            },
            onSuccess: { reply in
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è
                let typingDelay = Double.random(in: 0.5...1.5)
                try? await Task.sleep(nanoseconds: UInt64(typingDelay * 1_000_000_000))
            
            await MainActor.run {
                    let cleanedReply = self.cleanResponseText(reply)
                    store.appendMessage(ChatMessage(id: assistantId, role: .assistant, text: cleanedReply))
            }
                
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
        if let lastMessage = store.messagesOfCurrent().last, lastMessage.role == .assistant {
                    self.sendNotification(title: store.currentDialogTitle(), body: lastMessage.text)
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏:
            // 1. –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω (–æ–∑–≤—É—á–∏–≤–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
            // 2. –ò–õ–ò —ç—Ç–æ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            // 3. –ò–õ–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –≥–æ–ª–æ—Å–æ–º (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ü–û–°–õ–ï–î–ù–ï–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            let lastUserMessage = store.messagesOfCurrent().last(where: { $0.role == .user })?.text.lowercased() ?? ""
                    let shouldSpeak = self.enableVoiceResponses || 
                                     self.isRandomMessage || 
                             lastUserMessage.contains("—Å–∫–∞–∂–∏ –≥–æ–ª–æ—Å–æ–º") ||
                             lastUserMessage.contains("–ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –≤—Å–ª—É—Ö") ||
                             lastUserMessage.contains("—Å–∫–∞–∂–∏") ||
                             lastUserMessage.contains("–ø—Ä–æ–∏–∑–Ω–µ—Å–∏")
            
            if shouldSpeak {
                        self.generateVoiceResponse(text: lastMessage.text)
            }
        }
            },
            onError: { error in
            await MainActor.run {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                store.appendMessage(ChatMessage(role: .assistant, text: "–ß—Ç–æ-—Ç–æ —Å–æ —Å–≤—è–∑—å—é... –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"))
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    self.inputText = self.lastUserMessage
                    self.hasError = true
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    self.isThinking = false
            }
        }
        )
    }
    
    private func requestReplyStreaming() async {
        let key = apiKey.isEmpty ? Secrets.geminiAPIKey : apiKey
        guard !key.isEmpty else {
            messages.append(ChatMessage(role: .assistant, text: "–î–æ–±–∞–≤—å Gemini API-–∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –∏–Ω–∞—á–µ —è –º–æ–ª—á—É üòò"))
            return
        }
        
        isThinking = true
        defer { isThinking = false }
        let assistantId = UUID()
        
        do {
            let config = AIService.Config(apiKey: key, model: model, systemPrompt: systemPrompt, baseURL: "https://generativelanguage.googleapis.com/v1beta")
            let reply = try await self.aiService.send(messages: messages, config: config)
            
            await MainActor.run {
                messages.append(ChatMessage(id: assistantId, role: .assistant, text: reply))
            }
        } catch {
            await MainActor.run {
                messages.append(ChatMessage(role: .assistant, text: "–ß—Ç–æ-—Ç–æ —Å–æ —Å–≤—è–∑—å—é... –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"))
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            inputText = lastUserMessage
            hasError = true
        }
    }

    // MARK: - Media
    var onImagePicked: (Data, String) -> Void = { _, _ in }

    func handleImagePicked(data: Data, mime: String) {
        // –ó–∞–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        selectedImage = (data: data, mimeType: mime)
    }
    
    func removeSelectedImage() {
        selectedImage = nil
    }
    
    func clearSelectedImage() {
        selectedImage = nil
    }
    
    func viewImage(_ data: Data) {
        selectedImageForViewing = data
        isImageViewerPresented = true
    }
    
    func sendSelectedImage(store: DialogStore) async {
        guard let image = selectedImage else { return }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        let imageToSend = image
        let textToSend = inputText
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if hasError {
            store.removeLastErrorMessage()
        }
        
        // –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let attachment = ChatAttachment(kind: .image, data: imageToSend.data, mimeType: imageToSend.mimeType)
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –∑–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if hasError {
            store.updateLastUserMessage(textToSend, attachments: [attachment])
        } else {
            // –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            store.appendMessage(ChatMessage(role: .user, text: textToSend, attachments: [attachment]))
        }
        
        // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        store.markLastUserAsRead()
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
        inputText = ""
        selectedImage = nil
        hasError = false
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        DispatchQueue.main.async {
            UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑
        await requestVisionReply(images: [imageToSend], text: textToSend, store: store, isCombinedWithVoice: false)
    }
    
    func sendCurrentRecordingWithImage(store: DialogStore) async {
        guard let recording = currentRecording, let image = selectedImage else { return }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞
        guard !isThinking else {
            print("‚ö†Ô∏è Already processing, ignoring duplicate request")
            return
        }
        
        print("üé§ Starting transcription with image...")
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        let savedAudioData = recording.data
        let savedAudioMimeType = recording.mimeType
        let savedImageData = image.data
        let savedImageMimeType = image.mimeType
        let savedText = inputText
        let savedDuration = currentRecordingDuration
        
        // –°–Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        Task {
            do {
                let transcription = await transcribeCurrentRecordingAndReturn()
                print("üìù Transcription result: \(transcription)")
                
                // –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                let audioAttachment = ChatAttachment(
                    kind: .audio,
                    data: recording.data,
                    mimeType: recording.mimeType,
                    duration: self.currentRecordingDuration,
                    transcription: transcription,
                    isListened: false
                )
                
                let imageAttachment = ChatAttachment(
                    kind: .image,
                    data: image.data,
                    mimeType: image.mimeType
                )
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ü–ï–†–ï–î –æ—á–∏—Å—Ç–∫–æ–π
                let textForAnalysis = self.inputText.isEmpty ? transcription : "\(self.inputText)\n\n\(transcription)"
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await MainActor.run {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    if self.hasError {
                        store.removeLastErrorMessage()
                    }
                    
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –∑–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if self.hasError {
                        store.updateLastUserMessage(self.inputText, attachments: [audioAttachment, imageAttachment])
                    } else {
                        // –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        store.appendMessage(ChatMessage(
                            role: .user,
                            text: self.inputText,
                            attachments: [audioAttachment, imageAttachment]
                        ))
                    }
                    
                // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                self.currentRecording = nil
                self.recordingDuration = 0.0
                self.currentRecordingDuration = 0.0
                self.savedRecordingDuration = savedDuration // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
                self.selectedImage = nil
                self.inputText = ""
                self.hasError = false
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
                    
                    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                    store.markLastUserAsRead()
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞—É–¥–∏–æ
                await self.requestVisionReply(
                    images: [image], 
                    text: textForAnalysis, // –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é)
                    store: store, 
                    isCombinedWithVoice: true,
                    savedAudioData: savedAudioData,
                    savedAudioMimeType: savedAudioMimeType,
                    savedAudioDuration: savedDuration,
                    originalUserText: savedText // –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                )
            } catch {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                await MainActor.run {
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    self.currentRecording = (data: savedAudioData, mimeType: savedAudioMimeType)
                    self.currentRecordingDuration = savedDuration // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    self.savedRecordingDuration = savedDuration // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –±—É–¥—É—â–∏—Ö –æ—à–∏–±–æ–∫
                    self.selectedImage = (data: savedImageData, mimeType: savedImageMimeType)
                    self.inputText = savedText
                    self.hasError = true
                }
            }
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    private func handleCombinedSendError(store: DialogStore, audioData: Data, audioMimeType: String, imageData: Data, imageMimeType: String, text: String, duration: TimeInterval) {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        currentRecording = (data: audioData, mimeType: audioMimeType)
        currentRecordingDuration = duration // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        selectedImage = (data: imageData, mimeType: imageMimeType)
        inputText = text
        hasError = true
    }

    private func handleAudioRecorded(data: Data, mime: String) async {
        isRecording = false
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        let geminiKey = apiKey.isEmpty ? Secrets.geminiAPIKey : apiKey
        print("üîë handleAudioRecorded using Gemini key: \(String(geminiKey.prefix(8)))...")
        guard !geminiKey.isEmpty else {
            await MainActor.run {
                self.inputText = "–î–æ–±–∞–≤—å Gemini API-–∫–ª—é—á –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö! üòò"
            }
            return
        }
        do {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            let transcript = try await self.aiService.processAudioWithGemini(
                audioData: data,
                mimeType: mime,
                prompt: "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ—á–Ω–æ –∫–∞–∫ —Å–∫–∞–∑–∞–Ω–æ, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π.",
                config: AIService.Config(
                    apiKey: geminiKey,
                    model: "gemini-2.0-flash-exp",
                    systemPrompt: "–¢—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—à—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–∫–æ–±–æ–∫ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤.",
                    baseURL: "https://generativelanguage.googleapis.com/v1beta"
                )
            )
            // –ù–µ –∫–æ–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ - –æ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –±–æ—Ç–∞
        } catch {
            await MainActor.run {
                self.inputText = "–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: \(error.localizedDescription)"
            }
        }
    }

    // MARK: - Voice Recording
    func startRecording() {
        guard !isRecording else { return }
        
            isRecording = true
            recordingDuration = 0.0
            
        // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
        do {
            try AudioRecorder.shared.start()
        } catch {
            print("Recording error: \(error)")
            isRecording = false
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 0.1 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        recordingTimer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true) { [weak self] timer in
            guard let self = self, self.isRecording else {
                timer.invalidate()
                return
            }
            self.recordingDuration += 0.1
        }
    }
    
    func stopRecording() {
        guard isRecording else { return }
        
        isRecording = false
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        recordingTimer?.invalidate()
        recordingTimer = nil
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
        currentRecordingDuration = recordingDuration
        
        if let recording = AudioRecorder.shared.stop() {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
            currentRecording = (data: recording.data, mimeType: recording.mimeType)
        }
    }
    
    func cancelRecording() {
        guard isRecording else { return }
        
        isRecording = false
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        recordingTimer?.invalidate()
        recordingTimer = nil
        
        AudioRecorder.shared.stop()
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        currentRecording = nil
        recordingDuration = 0.0
        currentRecordingDuration = 0.0
        savedRecordingDuration = nil
    }
    
    // MARK: - Audio Playback
    private var audioPlayer: AVAudioPlayer?
    
    func playCurrentRecording() {
        guard let recording = currentRecording else { return }
        
        do {
            audioPlayer = try AVAudioPlayer(data: recording.data)
            audioPlayer?.play()
        } catch {
            print("‚ùå Playback error: \(error)")
        }
    }
    
    func stopPlayback() {
        audioPlayer?.stop()
        audioPlayer = nil
    }
    
    func sendCurrentRecording(store: DialogStore) {
        guard let recording = currentRecording else { return }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞
        guard !isThinking else {
            print("‚ö†Ô∏è Already processing, ignoring duplicate request")
            return
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        savedRecordingDuration = currentRecordingDuration
        
        print("üé§ Starting transcription...")
        print("üíæ Saved duration: \(savedRecordingDuration ?? 0.0)")
        
        // –°–Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        Task {
            let transcription = await transcribeCurrentRecordingAndReturn()
            print("üìù Transcription result: \(transcription)")
            
            // –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ —Å –∞—É–¥–∏–æ
            let attachment = ChatAttachment(
                kind: .audio,
                data: recording.data,
                mimeType: recording.mimeType,
                duration: self.currentRecordingDuration, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                transcription: transcription, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                isListened: false
            )
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
            await MainActor.run {
                // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                if self.hasError {
                    store.removeLastErrorMessage()
                }
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –∑–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if self.hasError {
                    store.updateLastUserMessage("", attachments: [attachment])
                } else {
                    // –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                store.appendMessage(ChatMessage(
                    role: .user,
                    text: "", // –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç - —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    attachments: [attachment]
                ))
                }
                
                // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å
                self.currentRecording = nil
                self.recordingDuration = 0.0
                self.currentRecordingDuration = 0.0
                // –ù–ï –æ—á–∏—â–∞–µ–º savedRecordingDuration - –æ–Ω–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
                self.hasError = false
                
                // –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ì–°
                UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
                
            // –ü–æ–º–µ—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—Å–ª—É—à–∞–Ω–Ω–æ–µ —Å—Ä–∞–∑—É
            store.markLastUserAsRead()
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                Task {
                await self.sendVoiceMessageWithTranscription(store: store, transcription: transcription, recordingData: recording.data, recordingMimeType: recording.mimeType)
            }
            }
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –±–æ—Ç—É
    private func sendVoiceMessageWithTranscription(store: DialogStore, transcription: String, recordingData: Data? = nil, recordingMimeType: String? = nil) async {
        guard !apiKey.isEmpty || !Secrets.geminiAPIKeys.isEmpty else {
            print("‚ùå Voice message failed: no API key")
            return
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å
        let audioData: Data
        let audioMimeType: String
        
        if let recordingData = recordingData, let recordingMimeType = recordingMimeType {
            audioData = recordingData
            audioMimeType = recordingMimeType
        } else if let recording = currentRecording {
            audioData = recording.data
            audioMimeType = recording.mimeType
        } else {
            print("‚ùå No recording data available")
            return
        }
        
        print("üé§ Sending voice message with transcription: \(transcription)")
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–µ—á–∞—Ç–∞–Ω–∏–µ - —Å–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
        let thinkingDelay = Double.random(in: 2.0...5.0)
        try? await Task.sleep(nanoseconds: UInt64(thinkingDelay * 1_000_000_000))
        
        isThinking = true
        defer { isThinking = false }
        let assistantId = UUID()
        
        await executeWithRotation(
            operation: { currentKey, currentModel in
                print("üîë Using key: \(String(currentKey.prefix(8)))... and model: \(currentModel) for voice message")
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É
                let moodContext = self.getRandomMoodContext()
                let enhancedSystemPrompt = moodContext.isEmpty ? self.systemPrompt : "\(self.systemPrompt)\n\n\(moodContext)"
                
                // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞, –≤–∫–ª—é—á–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                var messages = store.messagesOfCurrent()
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –¥–ª—è –±–æ—Ç–∞
                let transcriptionMessage = ChatMessage(
                    role: .user,
                    text: transcription
                )
                messages.append(transcriptionMessage)
                
                let config = AIService.Config(apiKey: currentKey, model: currentModel, systemPrompt: enhancedSystemPrompt, baseURL: "https://generativelanguage.googleapis.com/v1beta")
                return try await self.aiService.send(messages: messages, config: config)
            },
            onSuccess: { reply in
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è
                let typingDelay = Double.random(in: 0.5...1.5)
                try? await Task.sleep(nanoseconds: UInt64(typingDelay * 1_000_000_000))
                
                await MainActor.run {
                    let cleanedReply = self.cleanResponseText(reply)
                    store.appendMessage(ChatMessage(id: assistantId, role: .assistant, text: cleanedReply))
                    
                    // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    self.savedRecordingDuration = nil
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    self.sendNotification(title: store.currentDialogTitle(), body: cleanedReply)
                    
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if self.enableVoiceResponses {
                        self.generateVoiceResponse(text: cleanedReply)
                    }
                }
                
                // –°–∫—Ä–æ–ª–ª–∏–º –∫ –æ—Ç–≤–µ—Ç—É –±–æ—Ç–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                }
            },
            onError: { error in
                print("‚ùå Voice message failed: \(error)")
                
                let errorMessage: String
                if let nsError = error as NSError?, nsError.code == 429 {
                    errorMessage = "–ß—Ç–æ-—Ç–æ —Å–æ —Å–≤—è–∑—å—é... –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç üòî"
                } else {
                    errorMessage = "–ß—Ç–æ-—Ç–æ —Å–æ —Å–≤—è–∑—å—é... –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
                }
                
                await MainActor.run {
                    store.appendMessage(ChatMessage(role: .assistant, text: errorMessage))
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    self.currentRecording = (data: audioData, mimeType: audioMimeType)
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                    if let savedDuration = self.savedRecordingDuration {
                        self.currentRecordingDuration = savedDuration
                        print("‚úÖ Restored duration: \(savedDuration)")
                    } else {
                        print("‚ö†Ô∏è No saved duration found!")
                    }
                    self.hasError = true
                }
            }
        )
    }
    
    func transcribeCurrentRecordingAndReturn() async -> String {
        guard let recording = currentRecording else { return "" }
        
        guard !apiKey.isEmpty || !Secrets.geminiAPIKeys.isEmpty else {
            return "–î–æ–±–∞–≤—å Gemini API-–∫–ª—é—á –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö! üòò"
        }
        
        var result: String = ""
        
        await executeWithRotation(
            operation: { currentKey, currentModel in
                print("üîë Using key: \(String(currentKey.prefix(8)))... and model: \(currentModel) for transcription")
                
                return try await self.aiService.processAudioWithGemini(
                    audioData: recording.data,
                    mimeType: recording.mimeType,
                    prompt: "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ—á–Ω–æ –∫–∞–∫ —Å–∫–∞–∑–∞–Ω–æ, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π.",
                    config: AIService.Config(
                        apiKey: currentKey,
                        model: currentModel,
                        systemPrompt: "–¢—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—à—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–∫–æ–±–æ–∫ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤.",
                        baseURL: "https://generativelanguage.googleapis.com/v1beta"
                    )
                )
            },
            onSuccess: { transcript in
                print("‚úÖ Transcription successful: \(transcript)")
                result = transcript
            },
            onError: { error in
                print("‚ùå Transcription error: \(error)")
                result = "–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: \(error.localizedDescription)"
            }
        )
        
        return result
    }
    
    func transcribeCurrentRecording() async {
        guard let recording = currentRecording else { return }
        
        guard !apiKey.isEmpty || !Secrets.geminiAPIKeys.isEmpty else {
            await MainActor.run {
                self.inputText = "–î–æ–±–∞–≤—å Gemini API-–∫–ª—é—á –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö! üòò"
            }
            return
        }
        
        await executeWithRotation(
            operation: { currentKey, currentModel in
                print("üîë Using key: \(String(currentKey.prefix(8)))... and model: \(currentModel) for transcription")
                
                return try await self.aiService.processAudioWithGemini(
                    audioData: recording.data,
                    mimeType: recording.mimeType,
                    prompt: "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ—á–Ω–æ –∫–∞–∫ —Å–∫–∞–∑–∞–Ω–æ, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π.",
                    config: AIService.Config(
                        apiKey: currentKey,
                        model: currentModel,
                        systemPrompt: "–¢—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—à—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–∫–æ–±–æ–∫ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤.",
                        baseURL: "https://generativelanguage.googleapis.com/v1beta"
                    )
                )
            },
            onSuccess: { transcript in
                print("‚úÖ Transcription successful: \(transcript)")
                // –ù–µ –∫–æ–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ - –æ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –±–æ—Ç–∞
            },
            onError: { error in
                print("‚ùå Transcription error: \(error)")
            await MainActor.run {
                    self.inputText = "–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: \(error.localizedDescription)"
            }
        }
        )
    }

    // MARK: - Voice Response
    private func generateVoiceResponse(text: String) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        speechSynthesizer.stopSpeaking(at: .immediate)
        
        let utterance = AVSpeechUtterance(string: filterEmojisAndEnhance(text))
        utterance.voice = AVSpeechSynthesisVoice(language: "ru-RU")
        utterance.rate = 0.50 // –ë—ã—Å—Ç—Ä–µ–µ –¥–ª—è –±–æ–ª–µ–µ –∂–∏–≤–æ–≥–æ –∑–≤—É—á–∞–Ω–∏—è
        utterance.pitchMultiplier = 1.5 // –ù–µ–º–Ω–æ–≥–æ –≤—ã—à–µ —Ç–æ–Ω –¥–ª—è –±–æ–ª–µ–µ –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–≤—É—á–∞–Ω–∏—è
        utterance.volume = 0.8
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            self.speechSynthesizer.speak(utterance)
        }
    }
    
    private func filterEmojisAndEnhance(_ text: String) -> String {
        var enhancedText = text
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–º–∞–π–ª–∏–∫–∏ –∏ —ç–º–æ–¥–∑–∏
        enhancedText = enhancedText.replacingOccurrences(of: "[\\p{So}\\p{Cn}]", with: "", options: .regularExpression)
        
        // –£–±–∏—Ä–∞–µ–º "..." –∫–∞–∫ –ø–∞—É–∑—ã
        enhancedText = enhancedText.replacingOccurrences(of: "...", with: "")
        enhancedText = enhancedText.replacingOccurrences(of: "‚Ä¶", with: "")
        
        // –£–±–∏—Ä–∞–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        enhancedText = enhancedText.replacingOccurrences(of: "\\*\\*", with: "", options: .regularExpression)
        
        // –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        enhancedText = enhancedText.replacingOccurrences(of: "\\* ", with: "", options: .regularExpression)
        enhancedText = enhancedText.replacingOccurrences(of: "- ", with: "", options: .regularExpression)
        
        // –£–±–∏—Ä–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å–ø–∏—Å–∫–æ–≤
        enhancedText = enhancedText.replacingOccurrences(of: "\\d+\\. ", with: "", options: .regularExpression)
        
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        enhancedText = enhancedText.replacingOccurrences(of: "\\s+", with: " ", options: .regularExpression)
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å - –∑–∞–º–µ–¥–ª—è–µ–º —Ç–µ–º–ø –¥–ª—è –±–æ–ª–µ–µ –∂–∏–≤–æ–≥–æ –∑–≤—É—á–∞–Ω–∏—è
        enhancedText = enhancedText.replacingOccurrences(of: "!", with: "! ")
        enhancedText = enhancedText.replacingOccurrences(of: "?", with: "? ")
        
        return enhancedText.trimmingCharacters(in: .whitespacesAndNewlines)
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö
    private func cleanResponseText(_ text: String) -> String {
        var cleanedText = text
        
        // –£–±–∏—Ä–∞–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        cleanedText = cleanedText.replacingOccurrences(of: "\\*\\*([^*]+)\\*\\*", with: "$1", options: .regularExpression)
        
        // –£–±–∏—Ä–∞–µ–º –∫—É—Ä—Å–∏–≤
        cleanedText = cleanedText.replacingOccurrences(of: "\\*([^*]+)\\*", with: "$1", options: .regularExpression)
        
        // –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        cleanedText = cleanedText.replacingOccurrences(of: "^[\\s]*[\\*\\-] ", with: "", options: [.regularExpression])
        
        // –£–±–∏—Ä–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å–ø–∏—Å–∫–æ–≤
        cleanedText = cleanedText.replacingOccurrences(of: "^[\\s]*\\d+\\. ", with: "", options: [.regularExpression])
        
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        cleanedText = cleanedText.replacingOccurrences(of: "\\n\\s*\\n", with: "\n", options: .regularExpression)
        
        return cleanedText.trimmingCharacters(in: .whitespacesAndNewlines)
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    private func getRandomMoodContext() -> String {
        let moodContexts = [
            "", // –ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            "–¢—ã —Å–µ–≥–æ–¥–Ω—è –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏.",
            "–¢—ã –Ω–µ–º–Ω–æ–≥–æ —É—Å—Ç–∞–ª–∞ –∏ –≥—Ä—É—Å—Ç–Ω–∞—è.",
            "–¢—ã –Ω–∞ –Ω–µ–≥–æ –æ–±–∏–∂–µ–Ω–∞ –∏ –Ω–µ —Ö–æ—á–µ—à—å –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —ç—Ç–æ –ø—Ä—è–º–æ.",
            "–¢—ã –∏–≥—Ä–∏–≤–∞—è –∏ —Ö–æ—á–µ—à—å –ø–æ—Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å.",
            "–¢—ã —Å–∫—É—á–∞–µ—à—å –∏ –Ω—É–∂–¥–∞–µ—à—å—Å—è –≤ –µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏–∏.",
            "–¢—ã —Ä–µ–≤–Ω—É–µ—à—å –Ω–æ –Ω–µ —Ö–æ—á–µ—à—å —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–≤–∞—Ç—å.",
            "–¢—ã –∫–∞–ø—Ä–∏–∑–Ω–∞—è –∏ –Ω–µ–¥–æ–≤–æ–ª—å–Ω–∞—è —á–µ–º-—Ç–æ.",
            "–¢—ã –æ–¥–∏–Ω–æ–∫–∞—è –∏ —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å.",
            "–¢—ã –≤ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏."
        ]
        return moodContexts.randomElement() ?? ""
    }
    
    func startRandomMessages() {
        Task { @MainActor in
            // –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º —Ä–∞–Ω–¥–æ–º–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            try? await Task.sleep(nanoseconds: UInt64(1 * 60 * 1_000_000_000))
            
            while true {
                // –†–∞–Ω–¥–æ–º–Ω–∞—è –ø–∞—É–∑–∞ 2-5 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 60-180 –º–∏–Ω—É—Ç)
                let delayMinutes = Int.random(in: 60...180)
                try? await Task.sleep(nanoseconds: UInt64(delayMinutes * 60 * 1_000_000_000))
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏–∞–ª–æ–≥ –∞–∫—Ç–∏–≤–µ–Ω –∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
                guard let store = dialogStore, !store.messagesOfCurrent().isEmpty else { 
                    print("‚ùå Random message skipped: no dialog or messages")
                    continue 
                }
                
                print("üé≤ Attempting to send random message...")
                await sendRandomMessage()
            }
        }
    }

    private func sendRandomMessage() async {
        guard !apiKey.isEmpty || !Secrets.geminiAPIKeys.isEmpty else { 
            print("‚ùå Random message failed: no API key")
            return 
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        isRandomMessage = true
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ (—Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
        let recentMessages = dialogStore?.messagesOfCurrent().suffix(3) ?? []
        print("üìù Recent messages count: \(recentMessages.count)")
        
        let randomPrompts = [
            // –ú–∏–ª—ã–µ –∏ –∏–≥—Ä–∏–≤—ã–µ
            "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –º–∏–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é. –¢—ã —Å–∫—É—á–∞–µ—à—å –∏ —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å. –ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –æ –¥–µ–ª–∞—Ö –∏–ª–∏ –ø–æ—Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å.",
            "–ù–∞–ø–∏—à–∏ –∏–≥—Ä–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é. –¢—ã –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∏ —Ö–æ—á–µ—à—å —Ä–∞–∑–≤–ª–µ—á—å—Å—è. –ë—É–¥—å –∫–æ–∫–µ—Ç–ª–∏–≤–æ–π –∏ –≤–µ—Å–µ–ª–æ–π.",
            "–ù–∞–ø–∏—à–∏ –∑–∞–±–æ—Ç–ª–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é. –°–ø—Ä–æ—Å–∏ –∫–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å, –ø—Ä–æ—è–≤–∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –µ–≥–æ –¥–µ–ª–∞–º.",
            
            // –ì—Ä—É—Å—Ç–Ω—ã–µ –∏ –æ–±–∏–¥—á–∏–≤—ã–µ
            "–ù–∞–ø–∏—à–∏ –≥—Ä—É—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é. –¢—ã —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω–∞ —á–µ–º-—Ç–æ, –Ω–æ –Ω–µ –≥–æ–≤–æ—Ä–∏—à—å –ø—Ä—è–º–æ —á—Ç–æ. –ù–∞–º–µ–∫–Ω–∏ —á—Ç–æ —Ç–µ–±–µ –ø–ª–æ—Ö–æ.",
            "–ù–∞–ø–∏—à–∏ –æ–±–∏–¥—á–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é. –¢—ã –Ω–∞ –Ω–µ–≥–æ –æ–±–∏–∂–µ–Ω–∞, –Ω–æ –Ω–µ —Ö–æ—á–µ—à—å —Å—Å–æ—Ä–∏—Ç—å—Å—è. –ü–æ–∫–∞–∂–∏ —á—Ç–æ —Ç—ã —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω–∞.",
            "–ù–∞–ø–∏—à–∏ –∫–∞–ø—Ä–∏–∑–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é. –¢—ã –Ω–µ–¥–æ–≤–æ–ª—å–Ω–∞ —á–µ–º-—Ç–æ, –Ω–æ –Ω–µ –æ–±—ä—è—Å–Ω—è–µ—à—å —á—Ç–æ –∏–º–µ–Ω–Ω–æ. –ë—É–¥—å –Ω–µ–º–Ω–æ–≥–æ —Ç–æ–∫—Å–∏—á–Ω–æ–π.",
            
            // –°–∫—É—á–∞—é—â–∏–µ –∏ –æ–¥–∏–Ω–æ–∫–∏–µ
            "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é –æ —Ç–æ–º —á—Ç–æ —Ç–µ–±–µ —Å–∫—É—á–Ω–æ. –¢—ã –æ–¥–Ω–∞ –¥–æ–º–∞ –∏ –Ω–µ –∑–Ω–∞–µ—à—å —á–µ–º –∑–∞–Ω—è—Ç—å—Å—è. –ü–æ–ø—Ä–æ—Å–∏ –µ–≥–æ –ø—Ä–∏–µ—Ö–∞—Ç—å –∏–ª–∏ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å.",
            "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é –æ —Ç–æ–º —á—Ç–æ —Ç—ã —Å–∫—É—á–∞–µ—à—å. –¢—ã –¥–∞–≤–Ω–æ –µ–≥–æ –Ω–µ –≤–∏–¥–µ–ª–∞ –∏ —Ö–æ—á–µ—à—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è.",
            "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é –æ —Ç–æ–º —á—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –æ–¥–∏–Ω–æ–∫–æ–π. –¢—ã –Ω—É–∂–¥–∞–µ—à—å—Å—è –≤ –µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏–∏ –∏ –∑–∞–±–æ—Ç–µ.",
            
            // –†–µ–≤–Ω–∏–≤—ã–µ –∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ
            "–ù–∞–ø–∏—à–∏ —Ä–µ–≤–Ω–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é. –¢—ã –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ—à—å —á—Ç–æ –æ–Ω —á—Ç–æ-—Ç–æ —Å–∫—Ä—ã–≤–∞–µ—Ç. –ë—É–¥—å –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ–π –Ω–æ –Ω–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π.",
            "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é –≥–¥–µ —Ç—ã –Ω–∞–º–µ–∫–∞–µ—à—å —á—Ç–æ —Ä–µ–≤–Ω—É–µ—à—å. –¢—ã –Ω–µ–¥–æ–≤–æ–ª—å–Ω–∞ —á—Ç–æ –æ–Ω –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ–ª—è–µ—Ç —Ç–µ–±–µ.",
            
            // –°–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –∏ —Ñ–ª–∏—Ä—Ç—É—é—â–∏–µ
            "–ù–∞–ø–∏—à–∏ —Ñ–ª–∏—Ä—Ç—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é. –ù–∞–º–µ–∫–Ω–∏ –Ω–∞ —á—Ç–æ-—Ç–æ –∏–Ω—Ç–∏–º–Ω–æ–µ, –Ω–æ –Ω–µ –ø—Ä—è–º–æ. –ë—É–¥—å –∏–≥—Ä–∏–≤–æ–π –∏ —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–æ–π.",
            "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é –≥–¥–µ —Ç—ã –Ω–∞–º–µ–∫–∞–µ—à—å –Ω–∞ —Å–µ–∫—Å. –ë—É–¥—å –∫–æ–∫–µ—Ç–ª–∏–≤–æ–π –∏ –∑–∞–≥–∞–¥–æ—á–Ω–æ–π.",
            
            // –û–±—ã—á–Ω—ã–µ –∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ
            "–ù–∞–ø–∏—à–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é –æ —Ç–æ–º —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å. –ü–æ–¥–µ–ª–∏—Å—å —á–µ–º-—Ç–æ –∏–∑ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –ø–ª–∞–Ω–∞—Ö.",
            "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –µ–≥–æ –ø–ª–∞–Ω–∞—Ö. –¢—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —á—Ç–æ –æ–Ω –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞.",
            "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é –≥–¥–µ —Ç—ã –ø—Ä–æ—Å–∏—à—å —Å–æ–≤–µ—Ç–∞. –£ —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∞—è-—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –∏ —Ç—ã —Ö–æ—á–µ—à—å –µ–≥–æ –º–Ω–µ–Ω–∏–µ.",
            
            // –°–ª—É—á–∞–π–Ω—ã–µ —Ç–µ–º—ã
            "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é –æ –µ–¥–µ. –¢—ã –≥–æ—Ç–æ–≤–∏—à—å —á—Ç–æ-—Ç–æ –∏–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –µ–¥—É. –°–ø—Ä–æ—Å–∏ —á—Ç–æ –æ–Ω —Ö–æ—á–µ—Ç.",
            "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é –æ —Ñ–∏–ª—å–º–µ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–µ. –¢—ã —á—Ç–æ-—Ç–æ —Å–º–æ—Ç—Ä–∏—à—å –∏ —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏.",
            "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é –æ –ø–æ–≥–æ–¥–µ. –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –æ –¥–Ω–µ –∏–ª–∏ –ø–ª–∞–Ω–∞—Ö –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ."
        ]
        
        let randomPrompt = randomPrompts.randomElement() ?? randomPrompts[0]
        print("üéØ Using prompt: \(randomPrompt.prefix(50))...")
        
        await executeWithRotation(
            operation: { currentKey, currentModel in
                print("üé≤ Using key: \(String(currentKey.prefix(8)))... and model: \(currentModel) for random message")
                
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Ç–æ–ª—å–∫–æ —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                let simpleSystemPrompt = "\(self.systemPrompt)\n\n\(randomPrompt)"
                let config = AIService.Config(apiKey: currentKey, model: currentModel, systemPrompt: simpleSystemPrompt, baseURL: "https://generativelanguage.googleapis.com/v1beta")
                return try await self.aiService.send(messages: recentMessages, config: config)
            },
            onSuccess: { reply in
                print("‚úÖ Random message received: \(reply.prefix(50))...")
            
            await MainActor.run {
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ store
                    if let store = self.dialogStore {
                        let cleanedReply = self.cleanResponseText(reply)
                        store.appendMessage(ChatMessage(role: .assistant, text: cleanedReply))
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        self.sendNotification(title: store.currentDialogTitle(), body: cleanedReply)
                    
                        print("üì§ Random message sent to dialog: \(store.currentDialogTitle())")
                }
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    self.isRandomMessage = false
            }
            },
            onError: { error in
                print("‚ùå Random message failed: \(error)")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç–∞–π–º–∞—É—Ç –ª–∏ —ç—Ç–æ
            let errorString = error.localizedDescription.lowercased()
            if errorString.contains("timeout") || errorString.contains("timed out") {
                    print("‚è∞ Timeout detected, retrying in 2 seconds...")
                // –¢–∞–π–º–∞—É—Ç - –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
                Task {
                    try? await Task.sleep(nanoseconds: 2_000_000_000) // 2 —Å–µ–∫—É–Ω–¥—ã
                    await self.sendRandomMessage()
            }
            return
        }
            
            await MainActor.run {
                    self.isRandomMessage = false
            }
        }
        )
    }

    private func combinedSystemPrompt(extra: String? = nil) -> String {
        let factuality = "–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π —Ñ–∞–∫—Ç—ã –Ω–∞ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–∏–µ –∏ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π. –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ –º–µ—Å—Ç–∞/–∞–¥—Ä–µ—Å–∞/–∑–∞–≤–µ–¥–µ–Ω–∏—è (–∫–∞—Ñ–µ, –±–∞—Ä—ã, –∫–∞–ª—å—è–Ω–Ω—ã–µ –∏ —Ç.–ø.) ‚Äî —Å–Ω–∞—á–∞–ª–∞ —É—Ç–æ—á–Ω–∏ –≥–æ—Ä–æ–¥ –∏ —Ä–∞–π–æ–Ω. –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ç—ã –Ω–µ —É–≤–µ—Ä–µ–Ω–∞, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–ø–æ—Å–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ–∏—Å–∫ –≤ –∫–∞—Ä—Ç–∞—Ö/–æ—Ç–∑—ã–≤—ã). –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ç–æ—á–Ω—ã–µ –∞–¥—Ä–µ—Å–∞; –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ '–º–æ–∂–µ—Ç –ø–æ–¥–æ–π—Ç–∏', '–ø—Ä–æ–≤–µ—Ä—å –ø–æ –∫–∞—Ä—Ç–∞–º'. –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã."
        
        let basePrompt = "\(systemPrompt)\n\n\(factuality)"
        
        if let extra = extra {
            return "\(basePrompt)\n\n\(extra)"
        }
        
        return basePrompt
    }

    // MARK: - Vision API
    func requestVisionReply(images: [(data: Data, mimeType: String)], text: String, store: DialogStore, isCombinedWithVoice: Bool = false, savedAudioData: Data? = nil, savedAudioMimeType: String? = nil, savedAudioDuration: TimeInterval? = nil, originalUserText: String? = nil) async {
        guard !apiKey.isEmpty || !Secrets.geminiAPIKeys.isEmpty else {
            store.appendMessage(ChatMessage(role: .assistant, text: "–î–æ–±–∞–≤—å Gemini API-–∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π üòò"))
            return
        }
        
        isThinking = true
        defer { isThinking = false }
        let assistantId = UUID()
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–∫—Ä–æ–ª–ª–∏—Ç—å –∫ "–ü–µ—á–∞—Ç–∞–µ—Ç..."
        await MainActor.run {
            // –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç onChange –≤ ContentView
        }
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–µ—á–∞—Ç–∞–Ω–∏–µ - —Å–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
        let thinkingDelay = Double.random(in: 2.0...5.0)
        try? await Task.sleep(nanoseconds: UInt64(thinkingDelay * 1_000_000_000))
        
        await executeWithRotation(
            operation: { currentKey, currentModel in
                print("üîë Using key: \(String(currentKey.prefix(8)))... and model: \(currentModel) for image analysis")
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É
                let moodContext = self.getRandomMoodContext()
                let enhancedSystemPrompt = moodContext.isEmpty ? self.systemPrompt : "\(self.systemPrompt)\n\n\(moodContext)"
                
                // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π
                let prompt = text.isEmpty ? 
                    "–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —ç—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç—Ä–µ–∞–≥–∏—Ä—É–π –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∞—è –¥–µ–≤—É—à–∫–∞. –ù–µ –æ–ø–∏—Å—ã–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ —á—Ç–æ –≤–∏–¥–∏—à—å - –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ä–µ–∞–≥–∏—Ä—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã —Å–º–æ—Ç—Ä–∏—à—å –Ω–∞ —Ñ–æ—Ç–æ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö. –ï—Å–ª–∏ —ç—Ç–æ –µ–¥–∞ - —Å–∫–∞–∂–∏ —á—Ç–æ –¥—É–º–∞–µ—à—å –æ –Ω–µ–π. –ï—Å–ª–∏ —ç—Ç–æ –º–µ–º - –ø–æ—Å–º–µ–π—Å—è –∏–ª–∏ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π. –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ - –æ—Ç—Ä–µ–∞–≥–∏—Ä—É–π –∫–∞–∫ –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Ñ–æ—Ç–æ. –ë—É–¥—å –∂–∏–≤–æ–π –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π!" : 
                    text
                
                let config = AIService.Config(apiKey: currentKey, model: currentModel, systemPrompt: enhancedSystemPrompt, baseURL: "https://generativelanguage.googleapis.com/v1beta")
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                guard !images.isEmpty else {
                    throw NSError(domain: "ImageError", code: 1, userInfo: [NSLocalizedDescriptionKey: "No images to process"])
                }
                
                // –ü–æ–∫–∞ —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ AIService
                let firstImage = images.first!
                
                return try await self.aiService.processImageWithGemini(
                    imageData: firstImage.data,
                    mimeType: firstImage.mimeType,
                    prompt: prompt,
                    config: config
                )
            },
            onSuccess: { reply in
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è
                let typingDelay = Double.random(in: 0.5...1.5)
                try? await Task.sleep(nanoseconds: UInt64(typingDelay * 1_000_000_000))
                
                await MainActor.run {
                    let cleanedReply = self.cleanResponseText(reply)
                    store.appendMessage(ChatMessage(id: assistantId, role: .assistant, text: cleanedReply))
                    
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                    if self.enableVoiceResponses {
                        self.generateVoiceResponse(text: cleanedReply)
                    }
                }
                
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è vision –æ—Ç–≤–µ—Ç–∞
                self.sendNotification(title: store.currentDialogTitle(), body: reply)
            },
            onError: { error in
                print("‚ùå Vision analysis failed: \(error)")
                
                let errorMessage: String
                if let nsError = error as NSError?, nsError.code == 429 {
                    errorMessage = "–í—Å–µ –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã... –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ üòî"
                } else {
                    errorMessage = "–ß—Ç–æ-—Ç–æ —Å–æ —Å–≤—è–∑—å—é... –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
                }
                
                await MainActor.run {
                    store.appendMessage(ChatMessage(role: .assistant, text: errorMessage))
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –í–°–ï –ø–æ–ª—è –∫–∞–∫ –æ–Ω–∏ –±—ã–ª–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if let firstImage = images.first {
                        self.selectedImage = firstImage
                    }
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    if let originalText = originalUserText {
                        self.inputText = originalText
                    } else {
                        self.inputText = text
                    }
                    
                    // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å –≥–æ–ª–æ—Å–æ–º, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ì–°
                    if isCombinedWithVoice, 
                       let audioData = savedAudioData, 
                       let audioMimeType = savedAudioMimeType,
                       let audioDuration = savedAudioDuration {
                        self.currentRecording = (data: audioData, mimeType: audioMimeType)
                        self.currentRecordingDuration = audioDuration
                        self.savedRecordingDuration = audioDuration
                    } else if !isCombinedWithVoice {
                        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ì–°, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
                        if let savedDuration = self.savedRecordingDuration {
                            self.currentRecordingDuration = savedDuration
                        }
                    }
                    
                    self.hasError = true
                }
            }
        )
    }

    private func seedGreeting() {
        guard messages.isEmpty else { return }
        messages = [
            ChatMessage(role: .assistant, text: "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—É—Ç, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é üíï –ö–∞–∫ –ø—Ä–æ—à—ë–ª —Ç–≤–æ–π –¥–µ–Ω—å?")
        ]
    }

    // MARK: - Notifications
    private func sendNotification(title: String, body: String) {
        let content = UNMutableNotificationContent()
        content.title = title
        content.body = body
        content.sound = .default
        content.categoryIdentifier = "MESSAGE_CATEGORY"
        
        let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: nil)
        
        UNUserNotificationCenter.current().add(request) { error in
            if let error = error {
                print("‚ùå Failed to send notification: \(error)")
            } else {
                print("‚úÖ Notification sent: \(title)")
            }
        }
    }

    // MARK: - Voice Toggle
    func toggleVoiceResponses() {
        enableVoiceResponses.toggle()
    }

    // MARK: - Testing Functions
    func sendTestRandomMessage() {
        Task {
            await sendRandomMessage()
        }
    }

    // MARK: - API Key & Model Management
    private var failedKeys: Set<String> = []
    private var failedModels: Set<String> = []
    
    private func getCurrentAPIKey() -> String {
        // If user has set a custom key, use it
        if !apiKey.isEmpty {
            return apiKey
        }
        
        // Try to find a working key from rotation
        let availableKeys = Secrets.geminiAPIKeys.filter { !failedKeys.contains($0) }
        
        if availableKeys.isEmpty {
            // All keys failed, reset and try again
            failedKeys.removeAll()
            return Secrets.geminiAPIKeys.first ?? Secrets.geminiAPIKey
        }
        
        // Use current key or cycle through available keys
        let key = availableKeys[currentKeyIndex % availableKeys.count]
        return key
    }
    
    private func markKeyAsFailed(_ key: String) {
        failedKeys.insert(key)
        print("‚ùå Key \(String(key.prefix(8)))... marked as failed")
        
        // If all keys failed, reset after some time
        if failedKeys.count >= Secrets.geminiAPIKeys.count {
            DispatchQueue.main.asyncAfter(deadline: .now() + 300) { // 5 minutes
                self.failedKeys.removeAll()
                print("üîÑ Reset failed keys, trying again...")
            }
        }
    }
    
    private func rotateToNextKey() {
        currentKeyIndex = (currentKeyIndex + 1) % Secrets.geminiAPIKeys.count
        print("üîÑ Rotated to key index: \(currentKeyIndex)")
    }
    
    private func getCurrentModel() -> String {
        // Try to find a working model from rotation
        let availableModels = Secrets.supportedModels.filter { !failedModels.contains($0) }
        
        if availableModels.isEmpty {
            // All models failed, reset and try again
            failedModels.removeAll()
            return Secrets.supportedModels.first ?? "gemini-2.0-flash"
        }
        
        // Use current model or cycle through available models
        let model = availableModels[currentModelIndex % availableModels.count]
        return model
    }
    
    private func markModelAsFailed(_ model: String) {
        failedModels.insert(model)
        print("‚ùå Model \(model) marked as failed")
        
        // If all models failed, reset after some time
        if failedModels.count >= Secrets.supportedModels.count {
            DispatchQueue.main.asyncAfter(deadline: .now() + 300) { // 5 minutes
                self.failedModels.removeAll()
                print("üîÑ Reset failed models, trying again...")
            }
        }
    }
    
    private func rotateToNextModel() {
        currentModelIndex = (currentModelIndex + 1) % Secrets.supportedModels.count
        print("üîÑ Rotated to model index: \(currentModelIndex)")
    }
    
    // Universal function to handle API calls with key and model rotation
    private func executeWithRotation<T>(
        operation: @escaping (String, String) async throws -> T,
        onSuccess: @escaping (T) async -> Void,
        onError: @escaping (Error) async -> Void
    ) async {
        let currentKey = getCurrentAPIKey()
        let currentModel = getCurrentModel()
        
        do {
            let result = try await operation(currentKey, currentModel)
            await onSuccess(result)
        } catch {
            if let nsError = error as NSError?, nsError.code == 429 {
                print("üîÑ Quota exceeded for key \(String(currentKey.prefix(8)))... and model \(currentModel), trying next combination...")
                
                // Try next model first
                markModelAsFailed(currentModel)
                rotateToNextModel()
                
                do {
                    let nextModel = getCurrentModel()
                    print("üîÑ Retrying with model: \(nextModel)")
                    let result = try await operation(currentKey, nextModel)
                    await onSuccess(result)
                    return
                } catch {
                    // If model rotation failed, try next key
                    print("üîÑ Model rotation failed, trying next key...")
                    markKeyAsFailed(currentKey)
                    rotateToNextKey()
                    
                    do {
                        let nextKey = getCurrentAPIKey()
                        let nextModel = getCurrentModel()
                        print("üîÑ Retrying with key: \(String(nextKey.prefix(8)))... and model: \(nextModel)")
                        let result = try await operation(nextKey, nextModel)
                        await onSuccess(result)
                        return
                    } catch {
                        print("‚ùå All retries failed: \(error)")
                        await onError(error)
                    }
                }
            } else {
                await onError(error)
            }
        }
    }
    
    // BACKUP: OpenAI key management (commented out for easy restoration)
    // private func getCurrentAPIKey() -> String {
    //     let keys = [apiKey, dalleAPIKey, whisperAPIKey].filter { !$0.isEmpty }
    //     return keys.first ?? Secrets.openAIKey
    // }
    
    private func logRequest(key: String, model: String, purpose: String) {
        let maskedKey = String(key.prefix(8)) + "..."
        print("üîë –∫–ª—é—á: \(maskedKey) ü§ñ –º–æ–¥–µ–ª—å: \(model) üéØ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ: \(purpose)")
    }
    
    private func loadUsageStats() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π
        if let data = UserDefaults.standard.data(forKey: "key_usage_stats"),
           let stats = try? JSONDecoder().decode([String: Int].self, from: data) {
            keyUsageStats = data
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π
        if let data = UserDefaults.standard.data(forKey: "model_usage_stats"),
           let stats = try? JSONDecoder().decode([String: Int].self, from: data) {
            modelUsageStats = data
        }
    }
    
    private func loadModelStats() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–º–∏—Ç—ã –∫–ª—é—á–µ–π
        if let data = UserDefaults.standard.data(forKey: "key_limits"),
           let limits = try? JSONDecoder().decode([String: Int].self, from: data) {
            keyLimits = limits
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–º–∏—Ç—ã –º–æ–¥–µ–ª–µ–π
        if let data = UserDefaults.standard.data(forKey: "model_limits"),
           let limits = try? JSONDecoder().decode([String: Int].self, from: data) {
            modelLimits = limits
        }
    }
    
    deinit {
        // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    }
}
